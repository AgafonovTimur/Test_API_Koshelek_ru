{
	"info": {
		"_postman_id": "d9bd6914-c8b8-4186-8507-66ab3bd7d039",
		"name": "Test_API_Koshelek_ru",
		"description": "API documentation [https://p2psys-publicoffice.konomik.com/swagger/index.html](https://p2psys-publicoffice.konomik.com/swagger/index.html)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34511909",
		"_collection_link": "https://www.postman.com/agafonovtimur/workspace/agafonov-timur-public-workspace/collection/34511909-d9bd6914-c8b8-4186-8507-66ab3bd7d039?action=share&source=collection_link&creator=34511909"
	},
	"item": [
		{
			"name": "0_authorization",
			"item": [
				{
					"name": "correct_client_ID_and_secret",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"ClientID and ClientSecret are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.success).to.eql(true);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"success\" ],\r",
									"            \"properties\": {\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorData\" ],\r",
									"            \"properties\": {\r",
									"                \"errorData\": {\r",
									"                    \"type\": \"object\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"limit\" : { \"type\" : \"array\" },\r",
									"        \"profit\" : { \"type\" : \"array\" },\r",
									"        \"trust\" : { \"type\" : \"array\" },\r",
									"        \"hold\" : { \"type\" : \"array\" },\r",
									"        \"debt\" : { \"type\" : \"array\" }\r",
									"    },\r",
									"    \"required\" : [ \"limit\", \"profit\" , \"trust\", \"hold\", \"debt\" ]\r",
									"    \r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ClientId",
								"value": "{{clientId }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/balances?signature={{clientSecret}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"balances"
							],
							"query": [
								{
									"key": "signature",
									"value": "{{clientSecret}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "wrong_client_ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"ClientID inccorrect\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.success).to.eql(false) && pm.expect(jsonData.result.error).to.eql(\"ApiKeyNotFound\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"success\" ],\r",
									"            \"properties\": {\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"error\" ],\r",
									"            \"properties\": {\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"ErrorTrace\" ],\r",
									"            \"properties\": {\r",
									"                \"ErrorTrace\": {\r",
									"                    \"type\": \"string\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"ErrorCode\" ],\r",
									"            \"properties\": {\r",
									"                \"ErrorCode\": {\r",
									"                    \"type\": \"number\",\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ClientId",
								"value": "ID-6892fc719fbc467bae2564f37fdb64f728070be92e744a18b7ede4842ad4181",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/balances?signature={{clientSecret}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"balances"
							],
							"query": [
								{
									"key": "signature",
									"value": "{{clientSecret}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "wrong_client_secret",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"ClientSecret incorrect\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.success).to.eql(false) && pm.expect(jsonData.result.error).to.eql(\"SignatureNotValid\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"success\" ],\r",
									"            \"properties\": {\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"error\" ],\r",
									"            \"properties\": {\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"ErrorTrace\" ],\r",
									"            \"properties\": {\r",
									"                \"ErrorTrace\": {\r",
									"                    \"type\": \"string\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"ErrorCode\" ],\r",
									"            \"properties\": {\r",
									"                \"ErrorCode\": {\r",
									"                    \"type\": \"number\",\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ClientId",
								"value": "{{clientId }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/balances?signature=18c7652ba591431881391cba29f08fd6bcb2cdc6cbe646ff9d6b03d2f1520d4",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"balances"
							],
							"query": [
								{
									"key": "signature",
									"value": "18c7652ba591431881391cba29f08fd6bcb2cdc6cbe646ff9d6b03d2f1520d4"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		},
		{
			"name": "1_balance_services",
			"item": [
				{
					"name": "1_getBalance_get_one_currency_correct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Currency in JSON found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.success).to.eql(true);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"success\" ],\r",
									"            \"properties\": {\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorData\" ],\r",
									"            \"properties\": {\r",
									"                \"errorData\": {\r",
									"                    \"type\": \"object\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"limit\" : { \"type\" : \"array\" },\r",
									"        \"profit\" : { \"type\" : \"array\" },\r",
									"        \"trust\" : { \"type\" : \"array\" },\r",
									"        \"hold\" : { \"type\" : \"array\" },\r",
									"        \"debt\" : { \"type\" : \"array\" }\r",
									"    },\r",
									"    \"required\" : [ \"limit\", \"profit\" , \"trust\", \"hold\", \"debt\" ]\r",
									"    \r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ClientId",
								"value": "{{clientId }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/balances?signature={{clientSecret}}&currency=RUB",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"balances"
							],
							"query": [
								{
									"key": "signature",
									"value": "{{clientSecret}}"
								},
								{
									"key": "currency",
									"value": "RUB"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "1_getBalance_get_one_currency_incorrect",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Currency in JSON not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.success).to.eql(false) && pm.expect(jsonData.result.error).to.eql(\"CurrencyNotFound\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"success\" ],\r",
									"            \"properties\": {\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"error\" ],\r",
									"            \"properties\": {\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorCode\" ],\r",
									"            \"properties\": {\r",
									"                \"errorCode\": {\r",
									"                    \"type\": \"number\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorTrace\" ],\r",
									"            \"properties\": {\r",
									"                \"errorTrace\": {\r",
									"                    \"type\": \"string\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorData\" ],\r",
									"            \"properties\": {\r",
									"                \"errorData\": {\r",
									"                    \"type\": \"object\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"limit\" : { \"type\" : \"array\" },\r",
									"        \"profit\" : { \"type\" : \"array\" },\r",
									"        \"trust\" : { \"type\" : \"array\" },\r",
									"        \"hold\" : { \"type\" : \"array\" },\r",
									"        \"debt\" : { \"type\" : \"array\" }\r",
									"    },\r",
									"    \"required\" : [ \"limit\", \"profit\" , \"trust\", \"hold\", \"debt\" ]\r",
									"    \r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ClientId",
								"value": "{{clientId }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/balances?signature={{clientSecret}}&currency=RUBB",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"balances"
							],
							"query": [
								{
									"key": "signature",
									"value": "{{clientSecret}}"
								},
								{
									"key": "currency",
									"value": "RUBB"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "1_getBalance_get_one_currency_special_characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Currency in JSON not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.success).to.eql(false) && pm.expect(jsonData.result.error).to.eql(\"CurrencyNotFound\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"success\" ],\r",
									"            \"properties\": {\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"error\" ],\r",
									"            \"properties\": {\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorCode\" ],\r",
									"            \"properties\": {\r",
									"                \"errorCode\": {\r",
									"                    \"type\": \"number\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorTrace\" ],\r",
									"            \"properties\": {\r",
									"                \"errorTrace\": {\r",
									"                    \"type\": \"string\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorData\" ],\r",
									"            \"properties\": {\r",
									"                \"errorData\": {\r",
									"                    \"type\": \"object\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"limit\" : { \"type\" : \"array\" },\r",
									"        \"profit\" : { \"type\" : \"array\" },\r",
									"        \"trust\" : { \"type\" : \"array\" },\r",
									"        \"hold\" : { \"type\" : \"array\" },\r",
									"        \"debt\" : { \"type\" : \"array\" }\r",
									"    },\r",
									"    \"required\" : [ \"limit\", \"profit\" , \"trust\", \"hold\", \"debt\" ]\r",
									"    \r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ClientId",
								"value": "{{clientId }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/balances?currency=RU%&signature={{clientSecret}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"balances"
							],
							"query": [
								{
									"key": "currency",
									"value": "RU%"
								},
								{
									"key": "signature",
									"value": "{{clientSecret}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "1_getBalance_get_one_currency_with_dots",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Currency in JSON not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.success).to.eql(false) && pm.expect(jsonData.result.error).to.eql(\"CurrencyNotFound\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"success\" ],\r",
									"            \"properties\": {\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"error\" ],\r",
									"            \"properties\": {\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorCode\" ],\r",
									"            \"properties\": {\r",
									"                \"errorCode\": {\r",
									"                    \"type\": \"number\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorTrace\" ],\r",
									"            \"properties\": {\r",
									"                \"errorTrace\": {\r",
									"                    \"type\": \"string\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorData\" ],\r",
									"            \"properties\": {\r",
									"                \"errorData\": {\r",
									"                    \"type\": \"object\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"limit\" : { \"type\" : \"array\" },\r",
									"        \"profit\" : { \"type\" : \"array\" },\r",
									"        \"trust\" : { \"type\" : \"array\" },\r",
									"        \"hold\" : { \"type\" : \"array\" },\r",
									"        \"debt\" : { \"type\" : \"array\" }\r",
									"    },\r",
									"    \"required\" : [ \"limit\", \"profit\" , \"trust\", \"hold\", \"debt\" ]\r",
									"    \r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ClientId",
								"value": "{{clientId }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/balances?currency=R.U.B.&signature={{clientSecret}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"balances"
							],
							"query": [
								{
									"key": "currency",
									"value": "R.U.B."
								},
								{
									"key": "signature",
									"value": "{{clientSecret}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "1_getBalance_get_one_currency_empty_currency",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Currency in JSON not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.success).to.eql(false) && pm.expect(jsonData.result.error).to.eql(\"CurrencyNotFound\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"success\" ],\r",
									"            \"properties\": {\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"error\" ],\r",
									"            \"properties\": {\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorCode\" ],\r",
									"            \"properties\": {\r",
									"                \"errorCode\": {\r",
									"                    \"type\": \"number\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorTrace\" ],\r",
									"            \"properties\": {\r",
									"                \"errorTrace\": {\r",
									"                    \"type\": \"string\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorData\" ],\r",
									"            \"properties\": {\r",
									"                \"errorData\": {\r",
									"                    \"type\": \"object\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"limit\" : { \"type\" : \"array\" },\r",
									"        \"profit\" : { \"type\" : \"array\" },\r",
									"        \"trust\" : { \"type\" : \"array\" },\r",
									"        \"hold\" : { \"type\" : \"array\" },\r",
									"        \"debt\" : { \"type\" : \"array\" }\r",
									"    },\r",
									"    \"required\" : [ \"limit\", \"profit\" , \"trust\", \"hold\", \"debt\" ]\r",
									"    \r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ClientId",
								"value": "{{clientId }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/balances?currency=&signature={{clientSecret}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"balances"
							],
							"query": [
								{
									"key": "currency",
									"value": ""
								},
								{
									"key": "signature",
									"value": "{{clientSecret}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "1_getBalance_get_one_currency_lower_case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Currency in JSON found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.success).to.eql(true);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"success\" ],\r",
									"            \"properties\": {\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorData\" ],\r",
									"            \"properties\": {\r",
									"                \"errorData\": {\r",
									"                    \"type\": \"object\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"limit\" : { \"type\" : \"array\" },\r",
									"        \"profit\" : { \"type\" : \"array\" },\r",
									"        \"trust\" : { \"type\" : \"array\" },\r",
									"        \"hold\" : { \"type\" : \"array\" },\r",
									"        \"debt\" : { \"type\" : \"array\" }\r",
									"    },\r",
									"    \"required\" : [ \"limit\", \"profit\" , \"trust\", \"hold\", \"debt\" ]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ClientId",
								"value": "{{clientId }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/balances?currency=rub&signature={{clientSecret}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"balances"
							],
							"query": [
								{
									"key": "currency",
									"value": "rub"
								},
								{
									"key": "signature",
									"value": "{{clientSecret}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "1_getBalance_get_two_curencies_correct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"2 correct currencies in JSON found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.success).to.eql(true);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"success\" ],\r",
									"            \"properties\": {\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorData\" ],\r",
									"            \"properties\": {\r",
									"                \"errorData\": {\r",
									"                    \"type\": \"object\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"limit\" : { \"type\" : \"array\" },\r",
									"        \"profit\" : { \"type\" : \"array\" },\r",
									"        \"trust\" : { \"type\" : \"array\" },\r",
									"        \"hold\" : { \"type\" : \"array\" },\r",
									"        \"debt\" : { \"type\" : \"array\" }\r",
									"    },\r",
									"    \"required\" : [ \"limit\", \"profit\" , \"trust\", \"hold\", \"debt\" ]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ClientId",
								"value": "{{clientId }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/balances?currency=RUB&currency=USD&signature={{clientSecret}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"balances"
							],
							"query": [
								{
									"key": "currency",
									"value": "RUB"
								},
								{
									"key": "currency",
									"value": "USD"
								},
								{
									"key": "signature",
									"value": "{{clientSecret}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "1_getBalance_get_two_currencies_incorrect",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"2 currencies, 1 incorrect in JSON not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.success).to.eql(false) && pm.expect(jsonData.result.error).to.eql(\"CurrencyNotFound\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"success\" ],\r",
									"            \"properties\": {\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"error\" ],\r",
									"            \"properties\": {\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorCode\" ],\r",
									"            \"properties\": {\r",
									"                \"errorCode\": {\r",
									"                    \"type\": \"number\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorTrace\" ],\r",
									"            \"properties\": {\r",
									"                \"errorTrace\": {\r",
									"                    \"type\": \"string\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorData\" ],\r",
									"            \"properties\": {\r",
									"                \"errorData\": {\r",
									"                    \"type\": \"object\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"limit\" : { \"type\" : \"array\" },\r",
									"        \"profit\" : { \"type\" : \"array\" },\r",
									"        \"trust\" : { \"type\" : \"array\" },\r",
									"        \"hold\" : { \"type\" : \"array\" },\r",
									"        \"debt\" : { \"type\" : \"array\" }\r",
									"    },\r",
									"    \"required\" : [ \"limit\", \"profit\" , \"trust\", \"hold\", \"debt\" ]\r",
									"    \r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ClientId",
								"value": "{{clientId }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/balances?currency=RUB&currency=fewf&signature={{clientSecret}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"balances"
							],
							"query": [
								{
									"key": "currency",
									"value": "RUB"
								},
								{
									"key": "currency",
									"value": "fewf"
								},
								{
									"key": "signature",
									"value": "{{clientSecret}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "1_getBalance_not_existing_currency",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"currency does not exist\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.success).to.eql(false) && pm.expect(jsonData.result.error).to.eql(\"CurrencyNotFound\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"success\" ],\r",
									"            \"properties\": {\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"error\" ],\r",
									"            \"properties\": {\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorCode\" ],\r",
									"            \"properties\": {\r",
									"                \"errorCode\": {\r",
									"                    \"type\": \"number\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorTrace\" ],\r",
									"            \"properties\": {\r",
									"                \"errorTrace\": {\r",
									"                    \"type\": \"string\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorData\" ],\r",
									"            \"properties\": {\r",
									"                \"errorData\": {\r",
									"                    \"type\": \"object\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"limit\" : { \"type\" : \"array\" },\r",
									"        \"profit\" : { \"type\" : \"array\" },\r",
									"        \"trust\" : { \"type\" : \"array\" },\r",
									"        \"hold\" : { \"type\" : \"array\" },\r",
									"        \"debt\" : { \"type\" : \"array\" }\r",
									"    },\r",
									"    \"required\" : [ \"limit\", \"profit\" , \"trust\", \"hold\", \"debt\" ]\r",
									"    \r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ClientId",
								"value": "{{clientId }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/balances?currency=fewfwa&signature={{clientSecret}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"balances"
							],
							"query": [
								{
									"key": "currency",
									"value": "fewfwa"
								},
								{
									"key": "signature",
									"value": "{{clientSecret}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "2_list_of_transactions_on_balances",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"list of transactions found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.success).to.eql(true);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"success\" ],\r",
									"            \"properties\": {\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorData\" ],\r",
									"            \"properties\": {\r",
									"                \"errorData\": {\r",
									"                    \"type\": \"object\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"items\" : { \"type\" : \"array\" },\r",
									"    },\r",
									"    \"required\" : [ \"items\" ]\r",
									"    \r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ClientId",
								"value": "{{clientId }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/balances/changes?currency=RUB&signature={{clientSecret}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"balances",
								"changes"
							],
							"query": [
								{
									"key": "currency",
									"value": "RUB"
								},
								{
									"key": "signature",
									"value": "{{clientSecret}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "3_list_of_operations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\";list of operations found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.success).to.eql(true);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"success\" ],\r",
									"            \"properties\": {\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorData\" ],\r",
									"            \"properties\": {\r",
									"                \"errorData\": {\r",
									"                    \"type\": \"object\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"items\" : { \"type\" : \"array\" },\r",
									"        \"total\" : { \"type\" : \"number\" },\r",
									"    },\r",
									"    \"required\" : [ \"items\", \"total\" ]\r",
									"    \r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ClientId",
								"value": "{{clientId }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/balances/operations?currency=RUB&type=2&signature={{clientSecret}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"balances",
								"operations"
							],
							"query": [
								{
									"key": "currency",
									"value": "RUB"
								},
								{
									"key": "type",
									"value": "2"
								},
								{
									"key": "signature",
									"value": "{{clientSecret}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		},
		{
			"name": "2_deviceServices",
			"item": [
				{
					"name": "1_list_of_devices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"list of devices found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.success).to.eql(true);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"success\" ],\r",
									"            \"properties\": {\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorData\" ],\r",
									"            \"properties\": {\r",
									"                \"errorData\": {\r",
									"                    \"type\": \"object\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"devices\" : { \"type\" : \"array\" },\r",
									"        \"itemsCount\" : { \"type\" : \"number\" },\r",
									"    },\r",
									"    \"required\" : [ \"devices\", \"itemsCount\" ]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ClientId",
								"value": "{{clientId }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/devices?signature={{clientSecret}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"devices"
							],
							"query": [
								{
									"key": "signature",
									"value": "{{clientSecret}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "2_new_device_name_empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"New Device Name is Empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.success).to.eql(false);\r",
									"    pm.expect(jsonData.result.error).to.eql(\"InvalidArgument\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"success\" ],\r",
									"            \"properties\": {\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"error\" ],\r",
									"            \"properties\": {\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorCode\" ],\r",
									"            \"properties\": {\r",
									"                \"errorCode\": {\r",
									"                    \"type\": \"number\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorTrace\" ],\r",
									"            \"properties\": {\r",
									"                \"errorTrace\": {\r",
									"                    \"type\": \"string\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorData\" ],\r",
									"            \"properties\": {\r",
									"                \"errorData\": {\r",
									"                    \"type\": \"object\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"id\" : { \"type\" : \"number\" },\r",
									"        \"uuid\" : { \"type\" : \"string\" },\r",
									"        \"key\" : { \"type\" : \"string\" },\r",
									"        \"name\" : { \"type\" : \"string\" },\r",
									"        \"type\" : { \"type\" : \"string\" },\r",
									"    },\r",
									"    \"required\" : [ \"id\", \"uuid\", \"key\", \"name\", \"type\" ]\r",
									"    \r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"}); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ClientId",
								"value": "{{clientId }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\",\r\n  \"model\": \"s55\",\r\n  \"type\": \"TYPE_UNKNOWN\",\r\n  \"status\": \"DEVICE_STATUS_ACTIVE\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/devices/?signature={{clientSecret}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"devices",
								""
							],
							"query": [
								{
									"key": "signature",
									"value": "{{clientSecret}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "2_new_device_add_fields_that_does_not_exist_in_JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"New Device Name is Empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.success).to.eql(true);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"success\" ],\r",
									"            \"properties\": {\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"error\" ],\r",
									"            \"properties\": {\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorCode\" ],\r",
									"            \"properties\": {\r",
									"                \"errorCode\": {\r",
									"                    \"type\": \"number\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorTrace\" ],\r",
									"            \"properties\": {\r",
									"                \"errorTrace\": {\r",
									"                    \"type\": \"string\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorData\" ],\r",
									"            \"properties\": {\r",
									"                \"errorData\": {\r",
									"                    \"type\": \"object\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"id\" : { \"type\" : \"number\" },\r",
									"        \"uuid\" : { \"type\" : \"string\" },\r",
									"        \"key\" : { \"type\" : \"string\" },\r",
									"        \"name\" : { \"type\" : \"string\" },\r",
									"        \"type\" : { \"type\" : \"string\" },\r",
									"    },\r",
									"    \"required\" : [ \"id\", \"uuid\", \"key\", \"name\", \"type\" ]\r",
									"    \r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"}); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ClientId",
								"value": "{{clientId }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"ngage\",\r\n  \"model\": \"s55\",\r\n  \"type\": \"TYPE_UNKNOWN\",\r\n  \"status\": \"DEVICE_STATUS_ACTIVE\",\r\n  \"my_id\": \"device-id\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/devices/?signature={{clientSecret}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"devices",
								""
							],
							"query": [
								{
									"key": "signature",
									"value": "{{clientSecret}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "2_add_new_device_no_comma_in_request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"New device added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(3);\r",
									"    pm.expect(jsonData.message).to.eql(\"Request JSON payload is not correctly formatted.\");\r",
									"\r",
									"});;\r",
									"\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"code\" : { \"type\" : \"number\" },\r",
									"        \"message\" : { \"type\" : \"string\" },\r",
									"        \"details\" : { \"type\" : \"array\" },\r",
									"    },\r",
									"    \"required\" : [ \"code\", \"message\", \"details\" ]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ClientId",
								"value": "{{clientId }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"siemens\",\r\n  \"model\": \"s55\",\r\n  \"type\": \"TYPE_UNKNOWN\"\r\n  \"status\": \"DEVICE_STATUS_ACTIVE\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/devices/?signature={{clientSecret}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"devices",
								""
							],
							"query": [
								{
									"key": "signature",
									"value": "{{clientSecret}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "2_add_new_device",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"New device added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.success).to.eql(true);\r",
									"    pm.expect(jsonData.id).to.not.eql(0);\r",
									"    pm.expect(jsonData.name).to.eql(\"siemens\");\r",
									"    pm.collectionVariables.set(\"device_ID\", jsonData.id)\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"success\" ],\r",
									"            \"properties\": {\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorData\" ],\r",
									"            \"properties\": {\r",
									"                \"errorData\": {\r",
									"                    \"type\": \"object\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"id\" : { \"type\" : \"number\" },\r",
									"        \"name\" : { \"type\" : \"string\" },\r",
									"    },\r",
									"    \"required\" : [ \"id\", \"name\" ]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ClientId",
								"value": "{{clientId }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"siemens\",\r\n  \"model\": \"s55\",\r\n  \"type\": \"TYPE_UNKNOWN\",\r\n  \"status\": \"DEVICE_STATUS_ACTIVE\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/devices/?signature={{clientSecret}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"devices",
								""
							],
							"query": [
								{
									"key": "signature",
									"value": "{{clientSecret}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "2_add_new_device_field_missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"New device added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.success).to.eql(true);\r",
									"    pm.expect(jsonData.id).to.not.eql(0);\r",
									"    pm.expect(jsonData.name).to.eql(\"siemens\");\r",
									"    pm.collectionVariables.set(\"device_ID\", jsonData.id)\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"success\" ],\r",
									"            \"properties\": {\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorData\" ],\r",
									"            \"properties\": {\r",
									"                \"errorData\": {\r",
									"                    \"type\": \"object\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"id\" : { \"type\" : \"number\" },\r",
									"        \"name\" : { \"type\" : \"string\" },\r",
									"    },\r",
									"    \"required\" : [ \"id\", \"name\" ]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ClientId",
								"value": "{{clientId }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"siemens\",\r\n//   \"model\": \"s55\",                     -this string missing\r\n//   \"type\": \"TYPE_UNKNOWN\",             -this string missing\r\n  \"status\": \"DEVICE_STATUS_ACTIVE\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/devices/?signature={{clientSecret}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"devices",
								""
							],
							"query": [
								{
									"key": "signature",
									"value": "{{clientSecret}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "2_if_created_device_stats_correct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Created Device With Correct Stats\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.success).to.eql(true);\r",
									"    pm.expect(jsonData.id).to.not.eql(0);\r",
									"    pm.expect(jsonData.name).to.eql(\"siemens\");\r",
									"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"device_ID\"));\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"success\" ],\r",
									"            \"properties\": {\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorData\" ],\r",
									"            \"properties\": {\r",
									"                \"errorData\": {\r",
									"                    \"type\": \"object\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"id\" : { \"type\" : \"number\" },\r",
									"        \"name\" : { \"type\" : \"string\" },\r",
									"        \"model\" : { \"type\" : \"string\" },\r",
									"        \"type\" : { \"type\" : \"string\" },\r",
									"        \"uuid\" : { \"type\" : \"string\" },\r",
									"        \"fingerprint\" : { \"type\" : \"string\" },\r",
									"        \"ip\" : { \"type\" : \"string\" },\r",
									"        \"date\" : { \"type\" : \"number\" },\r",
									"    },\r",
									"    \"required\" : [ \"id\", \"name\", \"model\", \"type\", \"uuid\", \"fingerprint\", \"ip\", \"date\" ]\r",
									"    \r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"}); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ClientId",
								"value": "{{clientId }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/devices/{{device_ID}}?signature={{clientSecret}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"devices",
								"{{device_ID}}"
							],
							"query": [
								{
									"key": "signature",
									"value": "{{clientSecret}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "2_created_device_ID_does_not_exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"New Device ID doesn`t Exist\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.success).to.eql(false);\r",
									"    pm.expect(jsonData.result.error).to.eql(\"NotFound\");\r",
									"    pm.expect(jsonData.id).to.eql(0);\r",
									"    pm.expect(jsonData.name).to.eql(\"\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"success\" ],\r",
									"            \"properties\": {\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"error\" ],\r",
									"            \"properties\": {\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorCode\" ],\r",
									"            \"properties\": {\r",
									"                \"errorCode\": {\r",
									"                    \"type\": \"number\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorTrace\" ],\r",
									"            \"properties\": {\r",
									"                \"errorTrace\": {\r",
									"                    \"type\": \"string\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorData\" ],\r",
									"            \"properties\": {\r",
									"                \"errorData\": {\r",
									"                    \"type\": \"object\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"id\" : { \"type\" : \"number\" },\r",
									"        \"name\" : { \"type\" : \"string\" },\r",
									"        \"model\" : { \"type\" : \"string\" },\r",
									"        \"type\" : { \"type\" : \"string\" },\r",
									"        \"uuid\" : { \"type\" : \"string\" },\r",
									"    },\r",
									"    \"required\" : [ \"id\", \"name\", \"model\", \"type\", \"uuid\" ]\r",
									"    \r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"}); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ClientId",
								"value": "{{clientId }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/devices/4759439567236453?signature={{clientSecret}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"devices",
								"4759439567236453"
							],
							"query": [
								{
									"key": "signature",
									"value": "{{clientSecret}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "2_created_device_stats_hieroglyphs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Created Device ID is hieroglyphs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(3);\r",
									"    pm.expect(jsonData.message).to.eql(\"The input string '*@!!@' was not in a correct format.\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"code\" : { \"type\" : \"number\" },\r",
									"        \"message\" : { \"type\" : \"string\" },\r",
									"        \"details\" : { \"type\" : \"array\" }\r",
									"    },\r",
									"    \"required\" : [ \"code\", \"message\", \"details\" ]\r",
									"    \r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"}); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ClientId",
								"value": "{{clientId }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/devices/*@!!@?signature={{clientSecret}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"devices",
								"*@!!@"
							],
							"query": [
								{
									"key": "signature",
									"value": "{{clientSecret}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		},
		{
			"name": "2.1_device_Info_change",
			"item": [
				{
					"name": "2.1_new_device_change_data_part1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"motorolla addeds\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.success).to.eql(true);\r",
									"    pm.expect(jsonData.id).to.not.eql(0);\r",
									"    pm.expect(jsonData.name).to.eql(\"motorolla\");\r",
									"    pm.collectionVariables.set(\"device_ID\", jsonData.id)\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"success\" ],\r",
									"            \"properties\": {\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorData\" ],\r",
									"            \"properties\": {\r",
									"                \"errorData\": {\r",
									"                    \"type\": \"object\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"id\" : { \"type\" : \"number\" },\r",
									"        \"uuid\" : { \"type\" : \"string\" },\r",
									"        \"key\" : { \"type\" : \"string\" },\r",
									"        \"name\" : { \"type\" : \"string\" },\r",
									"        \"type\" : { \"type\" : \"string\" },\r",
									"        \"date\" : { \"type\" : \"number\" },\r",
									"        \"callbackUrl\" : { \"type\" : \"string\" },\r",
									"    },\r",
									"    \"required\" : [ \"id\", \"uuid\", \"key\", \"name\", \"type\", \"date\", \"callbackUrl\" ]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ClientId",
								"value": "{{clientId }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"motorolla\",\r\n  \"model\": \"e350\",\r\n  \"type\": \"TYPE_UNKNOWN\",\r\n  \"status\": \"DEVICE_STATUS_ACTIVE\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/devices/?signature={{clientSecret}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"devices",
								""
							],
							"query": [
								{
									"key": "signature",
									"value": "{{clientSecret}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "2.1_new_device_change_data_part2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"New device added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.success).to.eql(true);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"success\" ],\r",
									"            \"properties\": {\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorData\" ],\r",
									"            \"properties\": {\r",
									"                \"errorData\": {\r",
									"                    \"type\": \"object\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"    },    \r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ClientId",
								"value": "{{clientId }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"sony\",\r\n  \"model\": \"m2\",\r\n  \"type\": \"TYPE_UNKNOWN\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/devices/{{device_ID}}?signature={{clientSecret}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"devices",
								"{{device_ID}}"
							],
							"query": [
								{
									"key": "signature",
									"value": "{{clientSecret}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "2.1_created_device_request_stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Created Device With Correct Stats\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.success).to.eql(true);\r",
									"    pm.expect(jsonData.id).to.not.eql(0);\r",
									"    pm.expect(jsonData.name).to.eql(\"sony\");\r",
									"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"device_ID\"));\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"success\" ],\r",
									"            \"properties\": {\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorData\" ],\r",
									"            \"properties\": {\r",
									"                \"errorData\": {\r",
									"                    \"type\": \"object\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"id\" : { \"type\" : \"number\" },\r",
									"        \"name\" : { \"type\" : \"string\" },\r",
									"        \"model\" : { \"type\" : \"string\" },\r",
									"        \"type\" : { \"type\" : \"string\" },\r",
									"        \"uuid\" : { \"type\" : \"string\" },\r",
									"        \"fingerprint\" : { \"type\" : \"string\" },\r",
									"        \"ip\" : { \"type\" : \"string\" },\r",
									"        \"date\" : { \"type\" : \"number\" },\r",
									"    },\r",
									"    \"required\" : [ \"id\", \"name\", \"model\", \"type\", \"uuid\", \"fingerprint\", \"ip\", \"date\" ]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ClientId",
								"value": "{{clientId }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/devices/{{device_ID}}?signature={{clientSecret}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"devices",
								"{{device_ID}}"
							],
							"query": [
								{
									"key": "signature",
									"value": "{{clientSecret}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		},
		{
			"name": "2.2_delete_device",
			"item": [
				{
					"name": "2.2_new_device_to_delete_part1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"motorolla addeds\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.success).to.eql(true);\r",
									"    pm.expect(jsonData.id).to.not.eql(0);\r",
									"    pm.expect(jsonData.name).to.eql(\"Nokia\");\r",
									"    pm.collectionVariables.set(\"device_ID\", jsonData.id)\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"success\" ],\r",
									"            \"properties\": {\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorData\" ],\r",
									"            \"properties\": {\r",
									"                \"errorData\": {\r",
									"                    \"type\": \"object\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"id\" : { \"type\" : \"number\" },\r",
									"        \"uuid\" : { \"type\" : \"string\" },\r",
									"        \"key\" : { \"type\" : \"string\" },\r",
									"        \"name\" : { \"type\" : \"string\" },\r",
									"        \"type\" : { \"type\" : \"string\" },\r",
									"        \"date\" : { \"type\" : \"number\" },\r",
									"        \"callbackUrl\" : { \"type\" : \"string\" },\r",
									"    },\r",
									"    \"required\" : [ \"id\", \"uuid\", \"key\", \"name\", \"type\", \"date\", \"callbackUrl\" ]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ClientId",
								"value": "{{clientId }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Nokia\",\r\n  \"model\": \"5100\",\r\n  \"type\": \"TYPE_UNKNOWN\",\r\n  \"status\": \"DEVICE_STATUS_ACTIVE\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/devices/?signature={{clientSecret}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"devices",
								""
							],
							"query": [
								{
									"key": "signature",
									"value": "{{clientSecret}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "2.2_new_device_to_delete_part2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"New device added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.success).to.eql(true);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"success\" ],\r",
									"            \"properties\": {\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorData\" ],\r",
									"            \"properties\": {\r",
									"                \"errorData\": {\r",
									"                    \"type\": \"object\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"    },\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ClientId",
								"value": "{{clientId }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/devices/{{device_ID}}?signature={{clientSecret}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"devices",
								"{{device_ID}}"
							],
							"query": [
								{
									"key": "signature",
									"value": "{{clientSecret}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "2.2_deleted_device_request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Created Device With Correct Stats\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.success).to.eql(false);\r",
									"    pm.expect(jsonData.result.error).to.eql(\"NotFound\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"success\" ],\r",
									"            \"properties\": {\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"error\" ],\r",
									"            \"properties\": {\r",
									"                \"error\": {\r",
									"                    \"type\": \"string\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorCode\" ],\r",
									"            \"properties\": {\r",
									"                \"errorCode\": {\r",
									"                    \"type\": \"number\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorTrace\" ],\r",
									"            \"properties\": {\r",
									"                \"errorTrace\": {\r",
									"                    \"type\": \"string\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorData\" ],\r",
									"            \"properties\": {\r",
									"                \"errorData\": {\r",
									"                    \"type\": \"object\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"id\" : { \"type\" : \"number\" },\r",
									"        \"name\" : { \"type\" : \"string\" },\r",
									"        \"model\" : { \"type\" : \"string\" },\r",
									"        \"type\" : { \"type\" : \"string\" },\r",
									"        \"uuid\" : { \"type\" : \"string\" },\r",
									"    },\r",
									"    \"required\" : [ \"id\", \"name\", \"model\", \"type\", \"uuid\" ]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ClientId",
								"value": "{{clientId }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/devices/{{device_ID}}?signature={{clientSecret}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"devices",
								"{{device_ID}}"
							],
							"query": [
								{
									"key": "signature",
									"value": "{{clientSecret}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		},
		{
			"name": "3_Requisites",
			"item": [
				{
					"name": "3_add_new_device",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"New device added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.success).to.eql(true);\r",
									"    pm.expect(jsonData.id).to.not.eql(0);\r",
									"    pm.expect(jsonData.name).to.eql(\"nokia\");\r",
									"    pm.collectionVariables.set(\"device_ID\", jsonData.id)\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"success\" ],\r",
									"            \"properties\": {\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorData\" ],\r",
									"            \"properties\": {\r",
									"                \"errorData\": {\r",
									"                    \"type\": \"object\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"id\" : { \"type\" : \"number\" },\r",
									"        \"name\" : { \"type\" : \"string\" },\r",
									"    },\r",
									"    \"required\" : [ \"id\", \"name\" ]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ClientId",
								"value": "{{clientId }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"nokia\",\r\n  \"model\": \"6600\",\r\n  \"type\": \"TYPE_UNKNOWN\",\r\n  \"status\": \"DEVICE_STATUS_ACTIVE\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/devices/?signature={{clientSecret}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"devices",
								""
							],
							"query": [
								{
									"key": "signature",
									"value": "{{clientSecret}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "3_get_requisites",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"New device added\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.success).to.eql(true);\r",
									"    pm.expect(jsonData.id).to.not.eql(0);\r",
									"    pm.expect(jsonData.name).to.eql(\"nokia\");\r",
									"    pm.collectionVariables.set(\"device_ID\", jsonData.id)\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"success\" ],\r",
									"            \"properties\": {\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"result\" : { \"type\": \"object\", \r",
									"            \"required\": [ \"errorData\" ],\r",
									"            \"properties\": {\r",
									"                \"errorData\": {\r",
									"                    \"type\": \"object\",\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"    },\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ClientId",
								"value": "{{clientId }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/devices/{{device_ID}}?signature={{clientSecret}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"devices",
								"{{device_ID}}"
							],
							"query": [
								{
									"key": "signature",
									"value": "{{clientSecret}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "clientId ",
			"value": "ID-6892fc719fbc467bae2564f37fdb64f728070be92e744a18b7ede4842ad4181f"
		},
		{
			"key": "clientSecret",
			"value": "18c7652ba591431881391cba29f08fd6bcb2cdc6cbe646ff9d6b03d2f1520d48",
			"type": "string"
		},
		{
			"key": "base_url",
			"value": "https://p2psys-publicoffice.konomik.com"
		},
		{
			"key": "device_ID",
			"value": ""
		}
	]
}